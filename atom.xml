<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-17T07:33:28.052Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>liduo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>非root查看手机数据库和SharedPreferences的方法</title>
    <link href="http://yoursite.com/2017/10/16/%E9%9D%9Eroot%E6%9F%A5%E7%9C%8B%E6%89%8B%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CSharedPreferences%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/10/16/非root查看手机数据库和SharedPreferences的方法/</id>
    <published>2017-10-16T10:26:01.000Z</published>
    <updated>2017-10-17T07:33:28.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaoduoduo.github.io/archives/" target="_blank" rel="external">https://xiaoduoduo.github.io/archives/</a></p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>非root情况下查看手机数据库和SharedPreferences的方法有两种：</p><blockquote><p>方法一：Stetho</p><p>方法二：Android-Debug-Database</p></blockquote><h2 id="方法一：-Stetho"><a href="#方法一：-Stetho" class="headerlink" title="方法一： Stetho"></a>方法一： Stetho</h2><p>github的地址：<a href="http://facebook.github.io/stetho/" title="Stetho" target="_blank" rel="external">点击进入</a></p><h3 id="第一步：在gradle-gradle中添加："><a href="#第一步：在gradle-gradle中添加：" class="headerlink" title="第一步：在gradle.gradle中添加："></a>第一步：在gradle.gradle中添加：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123; </div><div class="line">  compile &apos;com.facebook.stetho:stetho:1.5.0&apos; </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="第二步：Application初始化："><a href="#第二步：Application初始化：" class="headerlink" title="第二步：Application初始化："></a>第二步：Application初始化：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class MyApplication extends Application &#123;</div><div class="line">  public void onCreate() &#123;</div><div class="line">    super.onCreate();</div><div class="line">    Stetho.initializeWithDefaults(this);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="第三步：运行程序："><a href="#第三步：运行程序：" class="headerlink" title="第三步：运行程序："></a>第三步：运行程序：</h3><p>手机可以通过usb链接电脑，并且是在开发者模式的模式；</p><p>浏览器输入这个地址：<br><a href="chrome://inspect/#devices" title="chrome://inspect/#devices" target="_blank" rel="external">chrome://inspect/#devices</a></p><p>点击 inspect</p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-17/19602195.jpg" alt=""></p><p>进入调试界面：</p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-17/75435356.jpg" alt=""></p><h2 id="方法二：-Android-Debug-Database"><a href="#方法二：-Android-Debug-Database" class="headerlink" title="方法二： Android-Debug-Database"></a>方法二： Android-Debug-Database</h2><p>github的地址：<a href="https://github.com/amitshekhariitbhu/Android-Debug-Database" title="Android-Debug-Database" target="_blank" rel="external">点击进入</a></p><h3 id="第一步：在gradle-gradle中添加：-1"><a href="#第一步：在gradle-gradle中添加：-1" class="headerlink" title="第一步：在gradle.gradle中添加："></a>第一步：在gradle.gradle中添加：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">debugCompile &apos;com.amitshekhar.android:debug-db:1.0.1&apos;</div></pre></td></tr></table></figure><p>debugCompile只会在debug模式下编译使用。</p><h3 id="第二步：打开你的Application-添加如下代码："><a href="#第二步：打开你的Application-添加如下代码：" class="headerlink" title="第二步：打开你的Application 添加如下代码："></a>第二步：打开你的Application 添加如下代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public static void showDebugDBAddressLogToast() &#123;</div><div class="line">        if (ConfigureSet.IsDebug) &#123;</div><div class="line">            try &#123;</div><div class="line">                Class&lt;?&gt; debugDB = Class.forName(&quot;com.amitshekhar.DebugDB&quot;);</div><div class="line">                Method getAddressLog = debugDB.getMethod(&quot;getAddressLog&quot;);</div><div class="line">                Object value = getAddressLog.invoke(null);</div><div class="line">                LogUtils.i(&quot;DebugDB:     &quot; + value);</div><div class="line">            &#125; catch (Exception ignore) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="第三步：运行app控制台查看log输出："><a href="#第三步：运行app控制台查看log输出：" class="headerlink" title="第三步：运行app控制台查看log输出："></a>第三步：运行app控制台查看log输出：</h3><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-17/38035199.jpg" alt=""></p><p>ps：</p><p><strong>1. 保证你的手机和pc在一个局域网</strong>。</p><p><strong>2. 如果你要修改8080端口,只需要在build.gradle中的buildTypes下面你的debug中进行配置：</strong><br><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-17/74825211.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  buildTypes &#123;</div><div class="line">      debug &#123;</div><div class="line">            resValue(&quot;string&quot;, &quot;PORT_NUMBER&quot;, &quot;8081&quot;)</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这时候控制台log：<br><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-17/34739799.jpg" alt=""></p><h3 id="第四步：浏览器打开网址：http-192-168-0-118-8081"><a href="#第四步：浏览器打开网址：http-192-168-0-118-8081" class="headerlink" title="第四步：浏览器打开网址：http://192.168.0.118:8081"></a>第四步：浏览器打开网址：<a href="http://192.168.0.118:8081" target="_blank" rel="external">http://192.168.0.118:8081</a></h3><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-17/95930701.jpg" alt=""></p><p>可以修改、添加和删除数据库中的数据：</p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-17/89878922.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一种方法，功能十分强大，但是需要使用usb链接设备和电脑，而且有时候打开速度比较慢。<br>本人比较喜欢第二种方式：简单、方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;版权归作者所有，如有转发，请注明文章出处：&lt;a href=&quot;https://xiaoduoduo.github.i
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Android 工具" scheme="http://yoursite.com/tags/Android-%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Alibaba Java Coding Guidelines使用</title>
    <link href="http://yoursite.com/2017/10/16/Alibaba-Java-Coding-Guidelines%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/10/16/Alibaba-Java-Coding-Guidelines使用/</id>
    <published>2017-10-16T09:55:34.000Z</published>
    <updated>2017-10-17T01:41:24.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaoduoduo.github.io/archives/" target="_blank" rel="external">https://xiaoduoduo.github.io/archives/</a></p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>阿里巴巴于10月14号在杭州云栖大会上，正式发布《阿里巴巴Java开发规约》的扫描插件。该插件在扫描代码后，将不符合规约的代码按<strong>Blocker/Critical/Major</strong>三个等级显示在下方，甚至在IDEA上，该插件还基于Inspection机制提供了实时检测功能，编写代码的同时也能快速发现问题所在。对于历史代码，部分规则实现了批量一键修复的功能。</p><h3 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h3><p><strong><a href="https://github.com/alibaba/p3c" title="https://github.com/alibaba/p3c" target="_blank" rel="external">https://github.com/alibaba/p3c</a></strong></p><p>效果图如下：<br><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-16/76708430.jpg" alt=""></p><h2 id="插件的安装方式"><a href="#插件的安装方式" class="headerlink" title="插件的安装方式"></a>插件的安装方式</h2><p>最低版本 JDK1.7+</p><blockquote><p>打开AndroidStudio Setting–&gt; Plugins–&gt; Browse repositories</p><p>输入Alibaba 可以看到插件 点击安装</p><p>重启as</p></blockquote><p>这里我已经做了安装</p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-16/61006767.jpg" alt=""></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="鼠标右键即可："><a href="#鼠标右键即可：" class="headerlink" title="鼠标右键即可："></a>鼠标右键即可：</h3><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-16/93079600.jpg" alt=""></p><h3 id="运行可以看到编辑器底部提示信息："><a href="#运行可以看到编辑器底部提示信息：" class="headerlink" title="运行可以看到编辑器底部提示信息："></a>运行可以看到编辑器底部提示信息：</h3><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-16/76708430.jpg" alt=""></p><h3 id="代码提示："><a href="#代码提示：" class="headerlink" title="代码提示："></a>代码提示：</h3><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-17/77870270.jpg" alt=""></p><h3 id="完整提示"><a href="#完整提示" class="headerlink" title="完整提示"></a>完整提示</h3><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-17/81803486.jpg" alt=""></p><h3 id="部分不规范的代码，支持一键修复"><a href="#部分不规范的代码，支持一键修复" class="headerlink" title="部分不规范的代码，支持一键修复"></a>部分不规范的代码，支持一键修复</h3><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-17/89267425.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代码规范可以提高我们的编码、排错效率，开发团队都应该遵守。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;版权归作者所有，如有转发，请注明文章出处：&lt;a href=&quot;https://xiaoduoduo.github.i
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Android 工具" scheme="http://yoursite.com/tags/Android-%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Android App自动化测试: OPEN-STF环境搭建</title>
    <link href="http://yoursite.com/2017/10/13/Android-App%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%20OPEN-STF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/10/13/Android-App自动化测试 OPEN-STF环境搭建/</id>
    <published>2017-10-13T07:09:38.000Z</published>
    <updated>2017-10-16T09:57:04.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaoduoduo.github.io/archives/" target="_blank" rel="external">https://xiaoduoduo.github.io/archives/</a></p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>1、测试是检验程序质量的保证，而自动化测试是提高测试效率的最好方式。就目前来说，通过UiAutomator，Robotium、Monkey，Appium 等工具。配合测试开发所写的测试脚本，要实现一个自动化测试的工作其实并不难，难得是Android的兼容性测试，由于Android设备的多样性，导致了各种机型的适配问题是测试最容易忽视的地方。</p><p>2、如何在多机型上进行自动化测试呢？目前Open STF（Smartphone Test Farm）的解决方案，其官网的地址是：<a href="https://openstf.io/" title="https://openstf.io/" target="_blank" rel="external">https://openstf.io/</a>。</p><p>3、这个系统类似于目前很流行的云测服务比如Testin，虽然网页上提供的设备很想模拟器中的设备，但是实际上都是真机。</p><h3 id="Open-STF的功能"><a href="#Open-STF的功能" class="headerlink" title="Open STF的功能"></a>Open STF的功能</h3><p>STF工具（ Smartphone Test Farm），基于NodeJS编写，可用于Android设备的远程管理。</p><blockquote><p>1、    在Web上支持管理上百个android设备。</p><p>2、    支持Android多个版本（2.3.3 ~ 5.1），而且不需要root。</p><p>3、    实时屏幕操作和显示。</p><p>4、    支持adb connnect远程连接调试。</p><p>5、    可以从PC机键盘输入到远程的android设备中。</p><p>6、    安装卸载APK。</p><p>7、    android设备信息的展示（如：网络状态、MIME、android版本、手机型号等等）。</p><p>8、    远程开关机、远程开关WIFI、截屏、LogCat等等。</p></blockquote><p>可以看两张直观的图：<br><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/76176255.jpg" alt=""></p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/43255903.jpg" alt=""></p><h2 id="Open-STF环境的搭建"><a href="#Open-STF环境的搭建" class="headerlink" title="Open STF环境的搭建"></a>Open STF环境的搭建</h2><h3 id="安装简介"><a href="#安装简介" class="headerlink" title="安装简介"></a>安装简介</h3><p>Github地址：<a href="https://github.com/openstf/stf" title="https://github.com/openstf/stf" target="_blank" rel="external">https://github.com/openstf/stf</a></p><p>官方推荐是用Linux系统或者OS X系统搭建，并不推荐使用Windows环境。</p><p>对于环境的要求：</p><blockquote><p>1、    Node.js &gt;= 6.9 (latest stable version preferred)</p><p>2、    ADB properly set up</p><p>3、    RethinkDB &gt;= 2.2</p><p>4、    GraphicsMagick (for resizing screenshots)</p><p>5、    ZeroMQ libraries installed</p><p>6、    Protocol Buffers libraries installed</p><p>7、    yasm installed (for compiling embedded libjpeg-turbo)</p><p>8、    pkg-config so that Node.js can find the libraries</p></blockquote><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>本蚊使用的系统环境：ubuntu 64位，kernel version 4.4.0<br>安装的方法有两种：</p><blockquote><p>方法1：使用官方的文档一步一步安装。<br>官方文档<br><a href="https://github.com/openstf/stf/blob/master/doc/DEPLOYMENT.md" title="https://github.com/openstf/stf/blob/master/doc/DEPLOYMENT.md" target="_blank" rel="external">https://github.com/openstf/stf/blob/master/doc/DEPLOYMENT.md</a></p></blockquote><p>其他博客地址：<a href="http://blog.csdn.net/addisonko/article/details/50912357" title="http://blog.csdn.net/addisonko/article/details/50912357" target="_blank" rel="external">http://blog.csdn.net/addisonko/article/details/50912357</a></p><p>很多文章介绍的装stf要先装一堆工具，然后使用npm install -g stf安装到系统中，大部分人会发现，由于网络或者其他原因，npm install -g stf方式也不太容易成功。</p><blockquote><p>方法2：推荐使用docker容器来搭建，根据我的搭建经验，docker容器确实更方便一些。</p></blockquote><p>在之前的搭建环境过程中使用方法1遇到很多问题（包括版本的兼容，stf下载不下来，权限等问题），推荐使用方法2搭建环境。本手册介绍的是方法2.</p><h2 id="Docker的简介和安装"><a href="#Docker的简介和安装" class="headerlink" title="Docker的简介和安装"></a>Docker的简介和安装</h2><h3 id="Docker的简介"><a href="#Docker的简介" class="headerlink" title="Docker的简介"></a>Docker的简介</h3><p>Docker的三大核心概念：</p><blockquote><p><strong>镜像、容器、仓库</strong></p></blockquote><p>镜像：类似虚拟机的镜像、用俗话说就是安装文件。</p><p>容器：类似一个轻量级的沙箱，容器是从镜像创建应用运行实例，<br>可以将其启动、开始、停止、删除、而这些容器都是相互隔离、互不可见的。</p><p>仓库：类似代码仓库，是Docker集中存放镜像文件的场所。</p><h3 id="Docker的安装之Firstblood"><a href="#Docker的安装之Firstblood" class="headerlink" title="Docker的安装之Firstblood"></a>Docker的安装之Firstblood</h3><p>在Ubuntu系统下打开终端 分别使用如下几条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">uname -r  // 查看版本</div><div class="line">su  // 切换root</div><div class="line">apt-get update  // 更新配置</div><div class="line">apt-get install -y docker.io  // 安装docker</div><div class="line">service docker start // 启动docker服务</div></pre></td></tr></table></figure><p>检查是否安装成功 docker version 看到如下信息，恭喜你，安装成功！！！</p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/93747328.jpg" alt=""></p><h2 id="STF相关镜像的拉取"><a href="#STF相关镜像的拉取" class="headerlink" title="STF相关镜像的拉取"></a>STF相关镜像的拉取</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>在Ubuntu系统下打开终端 分别使用如下几条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker pull openstf/stf:latest  // 拉取stf镜像</div><div class="line">docker pull sorccu/adb:latest  // 拉取adb镜像</div><div class="line">docker pull rethinkdb:latest  // 拉取rethinkdb数据库镜像</div><div class="line">docker pull openstf/ambassador:latest  // 拉取ambassador镜像</div><div class="line">docker pull nginx:latest  // 拉取nginx镜像</div></pre></td></tr></table></figure><p>举几个截图的例子：</p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/75852608.jpg" alt=""></p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/25442728.jpg" alt=""></p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/81509326.jpg" alt=""></p><h3 id="检测镜像"><a href="#检测镜像" class="headerlink" title="检测镜像"></a>检测镜像</h3><p>输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images  // 查看所有镜像</div></pre></td></tr></table></figure></p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/68134314.jpg" alt=""></p><h2 id="启动STF容器"><a href="#启动STF容器" class="headerlink" title="启动STF容器"></a>启动STF容器</h2><p>接着在终端 分别使用如下几条命令：</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p><strong>1. 首先启动一个数据库：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d --name rethinkdb -v /srv/rethinkdb:/data --net host rethinkdb rethinkdb --bind all --cache-size 8192 --http-port 8090</div></pre></td></tr></table></figure></p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/79184644.jpg" alt=""></p><p>其中860e60ac3c44d14f76ae6c1efb77d20c1d058c178512934cedbb3985f8f13e66是从容器的id号，每个容器的id号是唯一的。</p><p><strong>2. 然后启动adb service</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d --name adbd --privileged -v /dev/bus/usb:/dev/bus/usb --net host sorccu/adb:latest</div></pre></td></tr></table></figure></p><p><strong>3. 最后启动stf</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d --name stf --net host openstf/stf stf local --public-ip 192.168.228.129</div></pre></td></tr></table></figure></p><p>其中 ip填写你自己本地的ip地址。<br>查看ip  ifconfig</p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/27468544.jpg" alt=""></p><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>可以查看启动起来的镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps</div></pre></td></tr></table></figure></p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/57754972.jpg" alt=""></p><h3 id="打开地址"><a href="#打开地址" class="headerlink" title="打开地址"></a>打开地址</h3><p>使用浏览器打开如下地址：<a href="http://192.168.228.129:7100/#!/devices" target="_blank" rel="external">http://192.168.228.129:7100/#!/devices</a></p><p>这时候会看到一个登录页面，至此 环境搭建成功。<br>账号和邮箱不需要注册，按照规则输入 即可。<br>进入页面。<br><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/42282308.jpg" alt=""></p><p>点击use，可以操控手机：<br>可以使用adb命令来操作手机。<br>可以查看log日志等。<br>在这个界面中，开发者就可以根使用模拟器一样来操作远程设备了。唯一不同的是，这个是真实的设备而不是模拟器。国内很多测试公司头提供了这样的服务。<br>这些服务商提供的功能大同小异，但是公网的云测试服务完全依赖于网速，其画面的流畅度远不及内网Open-STF方案。</p><p><img src="http://oxr1t0q0c.bkt.clouddn.com/17-10-13/48984148.jpg" alt=""></p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h3 id="相关资源被锁"><a href="#相关资源被锁" class="headerlink" title="相关资源被锁"></a>相关资源被锁</h3><p>安装更新的时候提示相关资源被锁,无法下载更新 使用如下命令进行解锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo rm /var/cache/apt/archives/lock</div><div class="line">sudo rm /var/lib/dpkg/lock</div><div class="line">root权限下可以不用sudo</div></pre></td></tr></table></figure><h3 id="STFService-disconnect"><a href="#STFService-disconnect" class="headerlink" title="STFService disconnect"></a>STFService disconnect</h3><p>搭建好系统之后 插入手机，打开 <a href="http://192.168.228.129:7100/#!/devices" target="_blank" rel="external">http://192.168.228.129:7100/#!/devices</a> ，然后查看找到了设备，状态先是prepare 然后过了几秒又 disconnect了。切换了 火狐 google浏览器也是这样的问题。</p><p> 最后通过查看log：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INF/device:plugins:service 3434 [621QECQT4RS7A] Launching service</div><div class="line">FTL/device 3434 [621QECQT4RS7A] Setup had an error Error: Service had an error: &quot;Error: Not found; no service started.&quot;</div><div class="line">INF/device:resources:service 3566 [621QECQT4RS7A] Checking whether we need to install STFService</div></pre></td></tr></table></figure></p><p>提示手机端的stfservice没有启动起来。（就是有些手机不允许直接启动service，因此我们如果按照如下步骤是不能达到目的的）<br>启动手机端的service然后就可以连接ok。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;版权归作者所有，如有转发，请注明文章出处：&lt;a href=&quot;https://xiaoduoduo.github.i
      
    
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Android 测试" scheme="http://yoursite.com/tags/Android-%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/12/hello-world/"/>
    <id>http://yoursite.com/2017/10/12/hello-world/</id>
    <published>2017-10-12T03:12:55.569Z</published>
    <updated>2017-10-12T03:12:55.569Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
